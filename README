# Budget Tracker Backend

The backend for Spendly, a personal budgeting and expense tracking application. It provides a RESTful API for managing users, authentication, and financial transactions such as income and expenses.

## Features

- User authentication and authorization (JWT-based)
- CRUD operations for income and expense transactions
- Category and frequency tracking for recurring payments
- Secure password handling using bcrypt
- MongoDB database integration via Mongoose
- Input validation and error handling with Joi and Celebrate
- CORS and environment variable support

## Getting Started

### Prerequisites

- Node.js (v18 or higher)
- MongoDB (local or cloud instance)

### Installation

1. Clone this repository:
   git clone https://github.com/your-username/budget-tracker-backend.git
   cd budget-tracker-backend

2. Install dependencies:
   npm install

3. Configuration
   The backend can run without a .env file using default values:
   PORT defaults to 3001
   MONGO_URI defaults to mongodb://127.0.0.1:27017/budget-tracker_db
   JWT_SECRET is built in and does not need to be set manually

For production, itâ€™s recommended to use environment variables to secure sensitive data.

> Note: The lines above are plain text within this single code block. When you paste into your editor, remove the leading spaces if you want them as normal shell commands or keep the indentation to paste as a block.

## Running the Server

To start the development server:
npm run dev

To start the production server:
npm start

## API Overview

| Method | Endpoint  | Description               |
| ------ | --------- | ------------------------- |
| POST   | /signup   | Register a new user       |
| POST   | /signin   | Log in and receive a JWT  |
| GET    | /users/me | Get current user info     |
| PATCH  | /users/me | Update user profile       |
| GET    | /items    | Get all user transactions |
| POST   | /items    | Create a new transaction  |
| PATCH  | /item/:id | Update a transaction      |
| DELETE | /item/:id | Delete a transaction      |

## Technologies Used

- Node.js
- Express
- MongoDB + Mongoose
- JWT Authentication
- bcrypt for password hashing
- Celebrate / Joi for validation
- dotenv for environment variables

## License

This project is licensed under the MIT License. See the LICENSE file for details.
